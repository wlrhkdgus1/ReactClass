https://www.notion.so/2ea3c2087b384ce5ab99a8fc1300d322


# ⚫ React를 사용하는 이유

      **리액트 ? 왜 사용하는걸까**

- 다른페이지로 넘어가거나 포스팅을 발행하거나  그런 행동을 해도 새로고침이 되지 않고 스무스하게 동작이 가능함. 모바일 앱이랑 느낌이 비슷해서 **웹앱**이라고 부름
    
    ---
    

## ○React 장점

요즘 대기업이든 중소기업이든 사이트를 새로 

만들 때 굳이 필요없어도 자주 웹앱을 사용합니다.

                          `-그이유는-`

- **UX가 뛰어나서 좋은 사용자경험을 제공하니까**
- **HTML 관리가 편해지고**
- **구매전환율도 높아지고**
- **리액트 문법으로 iOS/Android 모바일 앱제작도 가능하고**
- **서버개발자가 편해져서**

---

# ⚫ React 설치와 개발환경 셋팅 (2021 ver)

1. **Node.js 검색후 최신버전 설치**

 2.  **Visual Studio Code 에디터 설치**

1. **바탕화면이나 원하는곳에 원하는이름의 폴더를 생성한후** 

       **Vs Code 열고 → 파일 → 오픈폴더 → 내가만든폴더**

 4.  **TERMINAL 클릭후 npx create-react-app 프로젝트명**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e6f752ec-3fc6-4be3-9253-1f9e52989ca7/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d8c929e6-633c-4ab4-9900-c3dd84f545de/Untitled.png)

```jsx

```

---

> **Node_modules:  라이브러리 모은 폴더
	      public:           static 파일 보관함 동적이 아닌 잘바뀌지 않는 파일을 보관
                 src:             실직적인 소스코드 보관함
	package.json:     npm 으로 설치한 라이브러리 목록**
> 

---

5. **TERMINAL에 npm start 입력**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/77b36bbb-cf20-40c8-83fe-2ba1cd7970d3/Untitled.png)

# ⚫**React 데이터바인딩 하는법 / 이미지 사용법**

- **React는 데이터 바인딩이 쉽다.**

- **리액트에서 데이터 바인딩 쉽게하는 법 {변수명}**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1a47c78a-30cc-4a9f-ae18-fef8ef42bc7f/Untitled.png)

 

- **이미지 사용법 - 위에서 2번째 import한 logo를
img src안에 작성하는데 작성할때 중괄호{logo} 사용**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/87392cf2-dc8c-444a-ac0d-7d1608e0fd82/Untitled.png)

- **JSX에서 Style 속성 사용하는법**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2840660b-30a3-4bc9-9fef-7c39c6fa9922/Untitled.png)

# ⚫**React State 사용방법**

1. **맨위 상단에 import React, { useState } from 'react';**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/669cc412-0da4-4046-b25c-057ce0c9d76e/Untitled.png)

1. **문자, 숫자, array, object 다 저장가능
밑에 보이는 코드는 array사용 .  글제목의 0번째 index인 남자 코트 추천** 

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/60639d8c-126c-47ca-b59a-dc09b92e82ed/Untitled.png)

1. **그냥 변수가 아닌 state 를 사용하는 이유 -장점-**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/eb7693ed-0cd9-4d83-b4a0-ffb5b91213fb/Untitled.png)

1. **터미널에 뜨는 warning eslint 보기 싫으면 맨위에 /* eslint disable */ 입력**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a4604625-a677-4ceb-9077-0f87e99ecf7a/Untitled.png)

1. State 변경함수 사용하기

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b0f379ed-b69c-4e00-b559-5b1dc06e5968/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ecf39203-0207-4514-8740-a2f6e191a1d8/Untitled.png)

1. 버튼 클릭시 남자 코트 추천 → 여자 코트 추천 으로 변경시키는 방법

![1.PNG](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/046a821b-5c64-4750-90d9-3c92702d8080/1.png)

```jsx

function 변경(){                 
     var a = [...글제목];      /*deep copy 값공유X 서로 독립적인 값을 가지는 복사*/
     a[0] = '여자 코트 추천';  
     글제목변경(a);
  }

h3> { 글제목[0] } <span onClick={()=>{따봉변경(따봉+1)}}>👍</span>{따봉}</h3>
```

1. **위에서 본 [...] < 은 스프레드 오퍼레이터 라고 ES6 신 문법.**

## **스프레드 오퍼레이터(Spread Operator)**

스프레드 오퍼레이터는 한글로 번역해보면 펼침 연산자 정도로 볼 수 있습니다. 스프레드 오퍼레이터는 특정 객체 또는 배열의 값을 다른 객체, 배열로 복제하거나 옮길 때 사용합니다. 연산자의 모양은 `...` 이렇게 생겼습니다.

## **스프레드 오퍼레이터 사용법**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4cf35158-3343-4bbb-a73b-d70b946dee48/Untitled.png)

1. **React의 Component 문법 사용방법**

( HTML을 한단어로 줄여서 쓸 수 있는 방법 : react의 Component문법  )

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/01093b2b-8309-4bfc-be7c-eec00aae57e0/Untitled.png)

(Component 함수를 만들때는 항상 맨앞의 영문을 대문자로 작성해야함.)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/68198ee4-0c2f-44e3-843c-7b9d019fce5a/Untitled.png)

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/e8a8622b-66e3-48bf-8e5a-8c2220d65e93/Untitled.png)

(return 내부에는 html태그가 나란히 사용이 안된다. 한번만 가능 
 <div>이안에 만드는건 가능</div> <> </> 사용)

1. **Componant 장점 및 단점**
- **장점**                     
-반복출현하는 HTML 덩어리들
-자주 변경되는 HTML UI들
-다른 페이지 만들 때도 Componant로 만듬
- **단점**                     
-state 쓸 때 복잡해짐
-상위 component에서 만든 state를 쓰려면 props 문법 이용해야됨

# ⚫React에서의 if문 : 삼항연산자 / 반복문 쓰는법 (map , for)

- If문 → 삼항연산자 사용

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c4220d73-a707-4cfa-8a06-5dd803ee01d7/Untitled.png)

위에 코드 처럼 삼항연산자 사용 . 정렬을 할때는 기본적으로 밑에코드처럼 작성

```jsx
{
	modal === true
	? <Modal />
	: null              <- 텅빈 HTML 이라는뜻
```

- 반복문 사용 → map() 사용

```jsx
var array = [2,3,4];

var newarray = array.map(function(a){
	return a*2
}); 
결과값 : 4,6,8
```

→ 실전사용

```jsx
			{
        글제목.map(function(a){
          return(
            <div className='list'>
              <h3> {a} </h3>
              <p>10월 7일 발행</p>
              <hr/>
            </div>
          )
        })
      }
```

→ 결과물

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/b7092ecc-01f7-4324-8af2-6bad6dcce9d1/Untitled.png)

- for문 사용

```jsx
------------------/*for문 사용법*/
function for1(){
 var array = [];
for(var i=0; i<3; i++){
   array.push(<div>안녕<div>);
	}
	return array
}

{ for1() }
```

# ⚫ React Props 사용하는 방법

- props : 자식이 부모 state를 사용하고 싶으면 props로 전송하여 사용할수있음.

---

### props로 자식에게 state 전해주는 법

1.<자식컴포넌트 작명={state명}/>

```jsx
{
        modal === true
        ? <Modal abc={글제목}></Modal>
        : null
      }
```

2.자식컴포넌트에서 props 파라미터 입력 후 사용

```jsx
function Modal(props){
  return(
    <div className="modal">
      <h2> { props.글제목[1] } </h2>
      <p>날짜</p>
      <p>상세내용</p>
    </div>
  )
}
```

# ⚫props를 이용한 클릭시 상세페이지 만드는 방법

-버튼을 눌러 상세페이지 (버튼 2 클릭해서 강남 우동 맛집이 검색되어있는 img)

```jsx
function App (){
  let [누른제목, 누른제목변경] = useState(0);
  return (
    <div>
      <button onClick={()=>{ 누른제목변경(0) }}>버튼1</button>
      <button onClick={()=>{ 누른제목변경(1) }}>버튼2</button>
      <button onClick={()=>{ 누른제목변경(2) }}>버튼3</button>
    </div>
  )
}
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ed8b1e0f-8818-46c7-b797-4e8c550a0976/Untitled.png)

-글제목을 마우스로 클릭시 상세페이지 (3번째 글제목 클릭했을때)

```jsx
let [누른제목 , 누른제목변경] = useState(0);

{
        글제목.map(function(a,i){
          return(
            <div className='list'>
              <h3 onClick={ ()=>{누른제목변경(i)} }> {a} <span onClick={()=>{따봉변경(따봉+1)}}>❤{따봉}</span></h3>
              <p>10월 7일 발행</p>
              <hr/>
            </div>
          )
        })
        
      }
```

**▲ map 반복문을 쓸 때 i라는 파라미터를 뒤에 추가해주시면 됩니다.**

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8bcadac6-f514-4cb3-824b-01177a1b37f9/Untitled.png)

# ⚫ 내가 입력한 input 값 알아내는법

-onChange , (e) ,  e.target.value

```jsx
let [입력값, 입력값변경] = useState('');

<input onChange={ (e)=>{ 입력값변경(e.target.value) } } />

```

# ⚫ **map을 쓰면 콘솔창에 에러가 뜨는 이유는**

key={} 라는 속성을 안적어서 그렇습니다.

리액트는 반복문 돌린 HTML 요소엔 꼭 key={}를 적으라고 권장합니다.

```jsx
{
        글제목.map(function(a,i){
          return(
            <div className='list' key={i}>
              <h3 onClick={ ()=>{누른제목변경(i)} }> {a} <span onClick={()=>{따봉변경(따봉+1)}}>❤{따봉}</span></h3>
              <p>10월 7일 발행</p>
              <hr/>
            </div>
          )
        })
        
      }
```

# ⚫ input 다루기 : 블로그 글발행 기능 만들기

```jsx
let [글제목, 글제목변경] = useState(['남자 코트 추천', '강남 우동 맛집', '수원 초밥 맛집']);
let [입력값, 입력값변경] = useState('');

<div className="publish">  <- 간단한 레이아웃 및 css
      <input onChange={ (e) => {입력값변경(e.target.value) } }/>  < input 입력값 알아내고
      <button onClick={ () => {              <- 버튼 클릭시
        var arrayCopy = [...글제목]           <- deepcopy를 통해 글제목 새로만들고
        arrayCopy.unshift(입력값);  <- nshift()메서드로 새로운 입력값을 배열의 맨 앞쪽에 추가하고
        글제목변경(arrayCopy);      <- 불러온다.
      } }>저장</button>
    </div>
```

결과 . 글이 잘 발행됨. 밑에 상세보기도 잘 작동함.

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f0cd6cda-48a9-4db0-a851-9d0ad9a3603d/Untitled.png)

# ⚫**class를 이용한 (구) React 문법**

```jsx
<Profile/> <- div안에.

class Profile extends React.Component {
  constructor(){
    super();
    this.state = { name : 'Kim' , age : 30 }
 }
 
 changeName = () => {
   this.setState( {name: 'Park'} )
 }

 render(){
  return (
     <div>
       <h3>프로필입니다.</h3>
       <p>저는 { this.state.name } 입니다.</p>
       <button onClick= { this.changeName }>클릭</button>
     </div>
    )
   }
 }
```

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0b774e14-2a25-4a6d-83c6-fcc096a14a4a/Untitled.png)

- *출력하려면 div안에 html 쓰는곳에 <profile/>*

class: 변수/함수 보관하는 덩어리

exyends: 오른쪽에 있는 React.Component 의 성질을 물려받겠습니다.

state는 constructor 안에 작성

- state를 변경하실 땐 this.setState() 라는 내장함수를 꼭 쓰셔야합니다.

그리고 소괄호()안에는 바꾸고 싶은 state 이름과 값만 적어주시면 됩니다.

주의) 신문법으로 만든 state 변경함수들은 아예 state를 바꿔치기해주는 역할인데

예전문법 setState()는 딱 필요한 부분만 수정해주고 나머지는 건들지 않습니다.

**오늘의 교훈 :** 신문법을 씁시다.

리액트 공식 문서도 컴포넌트를 만들 땐 function 문법으로 사용하라고 권장합니다.

어려운 class문법이나 this 키워드를 사용하지않아도 되니

세부 문법을 체크할 필요가 없이 매우 빠르고 쉽게 리액트 웹개발이 가능합니다.
